I"à<p>Accessibility is about making sure everybody, regardless of their abilities can access, understand, and navigate web content, regardless of how they‚Äôre accessing it. It is recommended that accessibility testing is conducted throughout the design and development process.</p>

<p>I‚Äôve previously blogged a little about accessibility, but in this blog post I share a number of different ways in which you can start to automate testing for accessibility. It‚Äôs important to note that although we will be looking at various ways to automate catching accessibility errors, these do not guarantee that your site is accessible. The absence of errors DOES NOT mean your page is accessible or compliant. Always combine automated testing with ongoing manual testing. Manual testing is the most reliable method to assess accessibility.</p>

<h2 id="keyboard-access">Keyboard access</h2>

<p>These guidelines cover a number of things like are you able to reach everything that‚Äôs interactive using the tab key? Can you also interact with the elements using space-bar, enter key, are things focusable, labeled appropriately etc. It‚Äôs important because a user may be unable to use a mouse; instead, they may use just the keyboard to navigate the web.</p>

<p>When thinking about testing the tabbing, sure you you could simply load up your web application and tab through each field, but what if we could start to quickly visualise this, or maybe we may still want to tab through manually but save the visual flow to attach to a story we are testings?</p>

<p>I‚Äôve previously written a few ways you could do this using <a href="https://chrome.google.com/webstore/detail/chromelens/idikgljglpfilbhaboonnpnnincjhjkd?hl=en">ChromeLens</a> and/or using <a href="https://github.com/eviltester/usefuljssnippetextension">JavaScript</a> in the browser which you can find here - <a href="https://vivrichards.co.uk/accessibility/automating-page-tab-flows-using-visual-testing-and-javascript">Automating page tabability</a>.</p>

<p><img src="/images/chrome-lens-flow.png" alt="_config.yml" /></p>

<p>Tools</p>
<ul>
  <li><a href="https://chrome.google.com/webstore/detail/chromelens/idikgljglpfilbhaboonnpnnincjhjkd?hl=en">ChromeLens Chrome Extension</a></li>
  <li><a href="https://github.com/eviltester/usefuljssnippetextension">Useful Snippet Chrome Extension</a></li>
</ul>

<p>WCAG 2.0 references</p>
<ul>
  <li><a href="https://www.w3.org/WAI/WCAG20/quickref/?showtechniques=128%2C14&amp;currentsidebar=%23col_overview#keyboard-operation">2.1 Keyboard Accessible (Guideline)</a></li>
</ul>

<h2 id="page-structure">Page structure</h2>

<p>These guidelines look to see whether you are using semantic elements and roles. It‚Äôs important because a user of your site may be low-sighted and so may need to navigate around the page by jumping to the page section they want to get to.</p>

<p>The <a href="http://wave.webaim.org/extension/">WAVE browser extension</a> is available for both Chrome and Firefox. After installing the tool simply navigate to the page you want to check and then press the WAVE icon within your toolbar. ‚ÄúYou will notice a new sidebar popup and WAVE will present your page with embedded icons and indicators. Each icon, box, and piece of information added by WAVE presents some information about the accessibility of your page.‚Äù</p>

<p>Within the sidebar you can view details of the structual elements of your page, view the structure of the page as well as switch off styles in order to see whether the page is structured in a logical way.</p>

<p><img src="/images/wave-page-structure.gif" alt="_config.yml" /></p>

<p>It‚Äôs also possible to check if your page is structured in a logical by disabling all stylesheets using a little bit of JavaScript. <a href="http://localhost:4000/accessibility/removing-style-sheets">Click here to view my previous post on this method</a>.</p>

<p>As well as offering a nice way to visualise the tab flow through your application (mentioned above), ChromeLens also offers ‚ÄòLenses‚Äô, visual impairment simulation. This tool lets you see how the page looks through the eyes of someone with vision issues.</p>

<p>Using the ‚ÄòLenses‚Äô simulator you can test for a whole range of different vision issues. An example where I‚Äôve found ‚ÄòLenses‚Äô handy is where a system relied on colour in order to inform a user that there had been a problem. The application showed red text and a red border around an input to show there had been an error rather than displaying a meaningful error message to the user.</p>

<p><img src="/images/chrome-lenses.gif" alt="_config.yml" /></p>

<p>Tools</p>
<ul>
  <li><a href="http://wave.webaim.org/extension/">WAVE browser extension</a></li>
  <li><a href="https://github.com/eviltester/usefuljssnippetextension">Useful Snippet Chrome Extension</a></li>
  <li><a href="https://chrome.google.com/webstore/detail/chromelens/idikgljglpfilbhaboonnpnnincjhjkd?hl=en">ChromeLens Chrome Extension</a></li>
</ul>

<p>WCAG 2.0 references</p>
<ul>
  <li><a href="https://www.w3.org/WAI/WCAG20/quickref/?showtechniques=14%2C128&amp;currentsidebar=%23col_overview#content-structure-separation-programmatic">1.3.1 Info and Relationships</a></li>
  <li><a href="https://www.w3.org/WAI/WCAG20/quickref/?showtechniques=14%2C128&amp;currentsidebar=%23col_overview#navigation-mechanisms-skip">2.4.1 Bypass Blocks</a></li>
</ul>

<h2 id="images">Images</h2>
<p>These guidelines relate to non-text content and providing text alternatives for people who cannot see images. It‚Äôs important because a user of your site may be blind and so uses a screen reader to read the alt text in order to understand the contents of an image.</p>

<p>The easiest way to check for alt tags is to use the <a href="http://wave.webaim.org/extension/">WAVE browser extension</a> which was mentioned earlier. Once you have installed the extension, click on the WAVE icon and you will see any image alt tag issues reported in the summary withing the errors section.</p>

<p>Tools</p>
<ul>
  <li><a href="http://wave.webaim.org/extension/">WAVE browser extension</a></li>
  <li><a href="https://github.com/eviltester/usefuljssnippetextension">Useful Snippet Chrome Extension</a></li>
</ul>

<p>WCAG 2.0 references</p>
<ul>
  <li><a href="https://www.w3.org/WAI/WCAG20/quickref/?showtechniques=14%2C128&amp;currentsidebar=%23col_overview&amp;tags=images%2Cimages-of-text%2Ctext-alternatives#text-equiv">1.1 Text Alternatives (Guideline)</a></li>
  <li><a href="https://www.w3.org/WAI/WCAG20/quickref/?showtechniques=14%2C128&amp;currentsidebar=%23col_overview#text-equiv-all">1.1.1 Non-text Content</a></li>
  <li><a href="https://www.w3.org/WAI/WCAG20/quickref/#qr-visual-audio-contrast-text-presentation">1.4.5 Images of Text</a></li>
</ul>

<h2 id="colour-and-contrast">Colour and contrast</h2>

<p>This guideline helps to ensure that there is enough contrast between text and its background colour. It‚Äôs important because a user of your site may have low vision and so needs content to have enough contrast to read it.</p>

<p>Use a color contrast tool and test that the contrast between the text and background is greater than or equal to 4.5:1.
Use an automated tool to quickly scan for colour contrast problems.
Don‚Äôt use colour alone to convey meaning. Use icons, text, and other visual elements to reinforce the meaning of the content.</p>

<p>Tools</p>
<ul>
  <li><a href="https://chrome.google.com/webstore/detail/chromelens/idikgljglpfilbhaboonnpnnincjhjkd?hl=en">ChromeLens Chrome Extension</a></li>
  <li><a href="http://wave.webaim.org/extension/">WAVE browser extension</a></li>
</ul>

<p>WCAG 2.0 references</p>
<ul>
  <li><a href="https://www.w3.org/WAI/WCAG21/quickref/?versions=2.0#contrast-minimum">1.4.3 Contrast (Minimum)</a></li>
</ul>
:ET